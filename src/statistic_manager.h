/**
 *  @file    statistic_manager.h
 *  @author  Fabio Chiusano
 *  @date    08/06/2018
 *  @version 1.0
 */

#ifndef STATISTICMANAGER_H
#define STATISTICMANAGER_H

#include <vector>
#include "mab.h"
#include "mabalg.h"

/**
 * @brief Class that saves all the statistics of an experiment and save them in some files
 */
class StatisticManager {
private:
  string name;

  MAB* mab;
  RegretType mabtype;
  vector<MABAlgorithm*> algs;

  vector<int> best_arm;
  vector<vector<double>> regrets; // regret[algorithm][timestep]
  vector<vector<double>> pulls; // pulls[timestep][arm]

  vector<vector<double>> rewards; // rewards[algorithm][timestep]
  vector<vector<int>> chosen_arm; // chosen_arm[algorithm][timestep]
public:
  /**
   * @param name string, name of the experiment
   * @param mab  MAB*, the MAB to be analysed
   * @param algs vector of MABAlgorithm to be analysed
   */
  StatisticManager(string name, MAB* mab, vector<MABAlgorithm*>& algs);

  /**
   * @brief Save the regret type of the experiment, in order to correctly compute the regret
   *
   * @param mabtype RegretType, type of regret
   */
  void set_mab_type(RegretType mabtype);

  /**
   * @brief Analyse all the pulls generated by the MABExperiment before the simulation begins. This is necessary because
   *  it computes the best arm at each timestep
   *
   * @param pulls all the pulls generated by the MABExperiment before the simulation begins
   */
  void analyze_pulls(vector<vector<double>>& pulls); // only if MABExperiment

  /**
   * @brief Analyse a new pull
   *
   * @param arm_to_pull integer, pulled arm
   * @param reward      double, reward received
   * @param alg_index   integer, index of the algorithm
   * @param timestep    integer, timestep of the pull
   */
  void update(int arm_to_pull, double reward, int alg_index, int timestep);

  /**
   * @brief Clears all the computed statistics
   */
  void reset();

  /**
   * @brief writes the distributions of the MAB on a file
   */
  void write_distributions();

  /**
   * @brief writes the regrets of all the algorithms on a file
   *
   * @param sim integer, the id of the performed simulation
   */
  void write_regrets(int sim); // only if MABEXperiment

  /**
   * @brief writes the rewards of all the algorithms on a file
   *
   * @param sim integer, the id of the performed simulation
   */
  void write_rewards(int sim);

  /**
   * @brief writes the chosen arms of all the algorithms on a file
   *
   * @param sim integer, the id of the performed simulation
   */
  void write_chosen_arm(int sim);
};

#endif
